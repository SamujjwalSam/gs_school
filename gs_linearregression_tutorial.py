# -*- coding: utf-8 -*-
"""GS_LinearRegression tutorial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tLVzFiZD3KWIHfKHZdUBZVG6vmJfWBji

#Numpy and Linear Regression

Numpy component of the tutorial is heavily influenced from [cs231n](https://cs231n.github.io/) course material.

##Numpy

Numpy is the core library for scientific computing in Python. It provides a high-performance multidimensional array object, and tools for working with these arrays. If you are already familiar with MATLAB, you might find this [tutorial](http://wiki.scipy.org/NumPy_for_Matlab_Users) useful to get started with Numpy.

To use Numpy, we first need to import the `numpy` package:
"""

import numpy as np

"""###Arrays

A numpy array is a grid of values, all of the same type, and is indexed by a tuple of nonnegative integers. The number of dimensions is the rank of the array; the shape of an array is a tuple of integers giving the size of the array along each dimension.

We can initialize numpy arrays from nested Python lists, and access elements using square brackets:
"""

a = np.array([1, 2, 3])  # Create a rank 1 array
print(type(a), a.shape, a[0], a[1], a[2])
a[0] = 5                 # Change an element of the array
print(a)
b = np.array([[1,2, 3],[3,4, 5]])
b.shape

b = np.array([[1,2,3],[4,5,6]])   # Create a rank 2 array
print(b)

"""Numpy also provides many functions to create arrays:"""

a = np.zeros((2,2))  # Create an array of all zeros
print(a)

b = np.ones((1,2))   # Create an array of all ones
print(b)

c = np.full((2,2), 7) # Create a constant array
print(c)

d = np.eye(5)        # Create a 2x2 identity matrix
print(d)

e = np.random.random((2,2)) # Create an array filled with random values
print(e)

"""###Array indexing

Numpy offers several ways to index into arrays.

Slicing: Similar to Python lists, numpy arrays can be sliced. Since arrays may be multidimensional, you must specify a slice for each dimension of the array:
"""

import numpy as np

# Create the following rank 2 array with shape (3, 4)
# [[ 1  2  3  4]
#  [ 5  6  7  8]
#  [ 9 10 11 12]]
a = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]])

# Use slicing to pull out the subarray consisting of the first 2 rows
# and columns 1 and 2; b is the following array of shape (2, 2):
# [[2 3]
#  [6 7]]
b = a[:2, 1:3]
print(b)

"""**Q. Slice bottom-left (2,2) matrix:**
```
[[ 5,  6],
[ 9, 10]]
```
"""

## Q. Slice bottom-left (2,2) matrix:

"""A slice of an array is a view into the same data, so modifying it will modify the original array."""

print(a[0, 1])
b[0, 0] = 77    # b[0, 0] is the same piece of data as a[0, 1]
print(a[0, 1]) 
a

"""Integer array indexing: When you index into numpy arrays using slicing, the resulting array view will always be a subarray of the original array. In contrast, integer array indexing allows you to construct arbitrary arrays using the data from another array. Here is an example:"""

a = np.array([[1,2], [3, 4], [5, 6]])

# An example of integer array indexing.
# The returned array will have shape (3,) and 
print(a[[0, 1, 2], [0, 1, 0]])

# The above example of integer array indexing is equivalent to this:
print(np.array([a[0, 0], a[1, 1], a[2, 0]]))

"""Boolean array indexing: Boolean array indexing lets you pick out arbitrary elements of an array. Frequently this type of indexing is used to select the elements of an array that satisfy some condition. Here is an example:"""

# import numpy as np

a = np.array([[1,2], [3, 4], [5, 6]])

bool_idx = (a > 2)  # Find the elements of a that are bigger than 2;
                    # this returns a numpy array of Booleans of the same
                    # shape as a, where each slot of bool_idx tells
                    # whether that element of a is > 2.

print(bool_idx)

# We use boolean array indexing to construct a rank 1 array
# consisting of the elements of a corresponding to the True values
# of bool_idx
print(a[bool_idx])

# We can do all of the above in a single concise statement:
print(a[a > 2])

"""For brevity we have left out a lot of details about numpy array indexing; if you want to know more you should read the documentation.

###Datatypes

Every numpy array is a grid of elements of the same type. Numpy provides a large set of numeric datatypes that you can use to construct arrays. Numpy tries to guess a datatype when you create an array, but functions that construct arrays usually also include an optional argument to explicitly specify the datatype. Here is an example:
"""

x = np.array([1, 2])  # Let numpy choose the datatype
y = np.array([1.0, 2.0])  # Let numpy choose the datatype
z = np.array([1, 2], dtype=np.int64)  # Force a particular datatype

print(x.dtype, y.dtype, z.dtype)

"""You can read all about numpy datatypes in the [documentation](http://docs.scipy.org/doc/numpy/reference/arrays.dtypes.html).

###Array math

Basic mathematical functions operate elementwise on arrays, and are available both as operator overloads and as functions in the numpy module:
"""

x = np.array([[1,2],[3,4]], dtype=np.float64)
y = np.array([[5,6],[7,8]], dtype=np.float64)

# Elementwise sum; both produce the array
print(x + y)
print(np.add(x, y))

# Elementwise difference; both produce the array
print(x - y)
print(np.subtract(x, y))

# Elementwise product; both produce the array
print(x * y)
print(np.multiply(x, y))

# Elementwise division; both produce the array
# [[ 0.2         0.33333333]
#  [ 0.42857143  0.5       ]]
print(x / y)
print(np.divide(x, y))

# Elementwise square root; produces the array
# [[ 1.          1.41421356]
#  [ 1.73205081  2.        ]]
print(np.sqrt(x))

"""Note that unlike MATLAB, `*` is elementwise multiplication, not matrix multiplication. We instead use the dot function to compute inner products of vectors, to multiply a vector by a matrix, and to multiply matrices. dot is available both as a function in the numpy module and as an instance method of array objects:"""

x = np.array([[1,2],[3,4]])
y = np.array([[5,6],[7,8]])

v = np.array([9,10])
w = np.array([11, 12])

# Inner product of vectors; both produce 219
print(v.dot(w))
print(np.dot(v, w))

"""You can also use the `@` operator which is equivalent to numpy's `dot` operator."""

print(v @ w)

x.shape, v.shape, x.dot(v).shape

# Matrix / vector product; both produce the rank 1 array [29 67]
print(x.dot(v))
print(np.dot(x, v))
print(x @ v)

# Matrix / matrix product; both produce the rank 2 array
# [[19 22]
#  [43 50]]
print(x.dot(y))
print(np.dot(x, y))
print(x @ y)

"""Numpy provides many useful functions for performing computations on arrays; one of the most useful is `sum`:"""

x = np.array([[1,2],[3,4]])

print(np.sum(x))  # Compute sum of all elements; prints "10"
print(np.sum(x, axis=0))  # Compute sum of each column; prints "[4 6]"
print(np.sum(x, axis=1))  # Compute sum of each row; prints "[3 7]"

"""You can find the full list of mathematical functions provided by numpy in the [documentation](http://docs.scipy.org/doc/numpy/reference/routines.math.html).

Apart from computing mathematical functions using arrays, we frequently need to reshape or otherwise manipulate data in arrays. The simplest example of this type of operation is transposing a matrix; to transpose a matrix, simply use the T attribute of an array object:
"""

print(x)
print("transpose\n", x.T)

v = np.array([[1,2,3]])
print(v )
print("transpose\n", v.T)

"""###Broadcasting

Broadcasting is a powerful mechanism that allows numpy to work with arrays of different shapes when performing arithmetic operations. Frequently we have a smaller array and a larger array, and we want to use the smaller array multiple times to perform some operation on the larger array.

For example, suppose that we want to add a constant vector to each row of a matrix. We could do it like this:
"""

# We will add the vector v to each row of the matrix x,
# storing the result in the matrix y
x = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])
v = np.array([1, 0, 1])
y = np.empty_like(x)   # Create an empty matrix with the same shape as x

print(x.shape,v.shape)

# Add the vector v to each row of the matrix x with an explicit loop
for i in range(4):
    print(x[i, :])
    y[i, :] = x[i, :] + v

print(y)

"""This works; however when the matrix `x` is very large, computing an explicit loop in Python could be slow. Note that adding the vector v to each row of the matrix `x` is equivalent to forming a matrix `vv` by stacking multiple copies of `v` vertically, then performing elementwise summation of `x` and `vv`. We could implement this approach like this:"""

vv = np.tile(v, (4, 1))  # Stack 4 copies of v on top of each other
print(vv)                # Prints "[[1 0 1]
                         #          [1 0 1]
                         #          [1 0 1]
                         #          [1 0 1]]"

vv.shape

y = x + vv  # Add x and vv elementwise
print(y)

"""Numpy broadcasting allows us to perform this computation without actually creating multiple copies of v. Consider this version, using broadcasting:"""

# import numpy as np

# We will add the vector v to each row of the matrix x,
# storing the result in the matrix y
x = np.array([[1,2,3], [4,5,6], [7,8,9], [10, 11, 12]])
v = np.array([1, 0, 1])
y = x + v  # Add v to each row of x using broadcasting
print(y)
print(np.array([1, 0, 1]).shape)

print(np.array([[1, 0, 1]]).shape)

print(np.array([[1, 0, 1],
 [1, 0, 1],
 [1, 0, 1],
 [1, 0, 1]]).shape)

"""The line `y = x + v` works even though `x` has shape `(4, 3)` and `v` has shape `(3,)` due to broadcasting; this line works as if v actually had shape `(4, 3)`, where each row was a copy of `v`, and the sum was performed elementwise.

Broadcasting two arrays together follows these rules:

1. If the arrays do not have the same rank, prepend the shape of the lower rank array with 1s until both shapes have the same length.
2. The two arrays are said to be compatible in a dimension if they have the same size in the dimension, or if one of the arrays has size 1 in that dimension.
3. The arrays can be broadcast together if they are compatible in all dimensions.
4. After broadcasting, each array behaves as if it had shape equal to the elementwise maximum of shapes of the two input arrays.
5. In any dimension where one array had size 1 and the other array had size greater than 1, the first array behaves as if it were copied along that dimension

If this explanation does not make sense, try reading the explanation from the [documentation](http://docs.scipy.org/doc/numpy/user/basics.broadcasting.html) or this [explanation](http://wiki.scipy.org/EricsBroadcastingDoc).

Functions that support broadcasting are known as universal functions. You can find the list of all universal functions in the [documentation](http://docs.scipy.org/doc/numpy/reference/ufuncs.html#available-ufuncs).

Here are some applications of broadcasting:
"""

# Compute outer product of vectors
v = np.array([1,2,3])  # v has shape (3,)
w = np.array([4,5])    # w has shape (2,)
# To compute an outer product, we first reshape v to be a column
# vector of shape (3, 1); we can then broadcast it against w to yield
# an output of shape (3, 2), which is the outer product of v and w:
[1,2,3]
print(np.reshape(v, (3, 1)) * w)

#4,3
## 3, => 1,3 => 4,3

"""This brief overview has touched on many of the important things that you need to know about numpy, but is far from complete. Check out the [numpy reference](http://docs.scipy.org/doc/numpy/reference/) to find out much more about numpy.

##Matplotlib

Matplotlib is a plotting library. In this section give a brief introduction to the `matplotlib.pyplot` module, which provides a plotting system similar to that of MATLAB.
"""

import matplotlib.pyplot as plt

"""By running this special iPython command, we will be displaying plots inline:"""

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

"""###Plotting

The most important function in `matplotlib` is plot, which allows you to plot 2D data. Here is a simple example:
"""

# Compute the x and y coordinates for points on a sine curve
x = np.arange(0, 3 * np.pi, 0.1)
y = np.sin(x)

# Plot the points using matplotlib
plt.plot(x, y)

"""With just a little bit of extra work we can easily plot multiple lines at once, and add a title, legend, and axis labels:"""

y_sin = np.sin(x)
y_cos = np.cos(x)

# Plot the points using matplotlib
plt.plot(x, y_sin)
plt.plot(x, y_cos)
plt.xlabel('x axis label')
plt.ylabel('y axis label')
plt.title('Sine and Cosine')
plt.legend(['Sine', 'Cosine'])

"""###Subplots

You can plot different things in the same figure using the subplot function. Here is an example:
"""

# Compute the x and y coordinates for points on sine and cosine curves
x = np.arange(0, 3 * np.pi, 0.1)
y_sin = np.sin(x)
y_cos = np.cos(x)

# Set up a subplot grid that has height 2 and width 1,
# and set the first such subplot as active.
plt.subplot(2, 1, 1)

# Make the first plot
plt.plot(x, y_sin)
plt.title('Sine')

# Set the second subplot as active, and make the second plot.
plt.subplot(2, 1, 2)
plt.plot(x, y_cos)
plt.title('Cosine')

# Show the figure.
plt.show()

"""You can read much more about the `subplot` function in the [documentation](http://matplotlib.org/api/pyplot_api.html#matplotlib.pyplot.subplot).

## Linear Regression
"""

import pandas as pd
import numpy as np

## Downloads the zip file
!wget https://archive.ics.uci.edu/ml/machine-learning-databases/00320/student.zip

## Uncompress the file content
!unzip student.zip

stu_df = pd.read_csv("student-mat.csv", sep=';')
stu_df.head(3)

import seaborn as sns
sns.set_theme(style="darkgrid")

sns.relplot(x="G1", y="absences", data=stu_df)

sns.catplot(x="age", y="G1", kind="box", hue='sex', data=stu_df)

plt.figure(figsize=(15,10))
plt.tight_layout()
sns.distplot(stu_df['G1'])

stu_df.info()

cols = ['age', "Medu", "Fedu", "traveltime", "studytime", "failures", "famrel", 
        "freetime", "goout", "Dalc", "Walc", "health", "absences"]
x = stu_df[cols].values
x

y1 = stu_df[['G1']].values
y1[:5]

## Split data for evaluation purposes:
train_size = 0.7
train_count = int(x.shape[0] * train_size)
x_train, y1_train = x[:train_count], y1[:train_count]
x_test, y1_test = x[train_count:], y1[train_count:]

fig,axs = plt.subplots(2,2)
axs[0, 0].plot(x_train[:,0],y1_train,'o')
axs[0, 1].plot(x_train[:,1],y1_train,'o')
axs[1, 0].plot(x_train[:,2],y1_train,'o')
axs[1, 1].plot(x_train[:,3],y1_train,'o')

# Check correlation of each input with the input
from scipy.stats import pearsonr
print(f'Correlation between x1 (age) and y = {pearsonr(x_train[:,0],y1_train[:,0])[0]:.2f}')
print(f'Correlation between x2 (Medu) and y = {pearsonr(x_train[:,1],y1_train[:,0])[0]:.2f}')
print(f'Correlation between x3 (Fedu) and y = {pearsonr(x_train[:,2],y1_train[:,0])[0]:.2f}')

from sklearn.linear_model import LinearRegression

model = LinearRegression()

result = model.fit(x_train, y1_train)

r_sq = model.score(x_train, y1_train)
print('coefficient of determination:', r_sq)
print('intercept:', model.intercept_)
print('slope:', model.coef_)
for col, sl in zip(cols, model.coef_[0]):
    print(f'Feature [{col}] has importance [{sl}]')

len(cols), len(model.coef_)
# len(cols), len(model.coef_[0])

y_pred = model.predict(x_test)
for i,j in zip(y1_test, y_pred):
    print(f'Original {i}, Predicted {j}')

"""Q. Add mean-var plot"""

## Q. Add mean-var plot

gwp_df = pd.read_csv('https://archive.ics.uci.edu/ml/machine-learning-databases/00597/garments_worker_productivity.csv')
gwp_df.head(3)

sns.relplot(x="smv", y="actual_productivity", hue="team", style="department", data=gwp_df)

fmri = sns.load_dataset("fmri")

sns.relplot(x="timepoint", y="signal", kind="line", ci="sd", data=fmri)

tips = sns.load_dataset("tips")

sns.catplot(x="team", y="actual_productivity", kind="box", data=gwp_df)

gwp_df.info()

"""**Q. Apply Linear Regression on gwp_df data**"""

## Q. Apply Linear Regression on gwp_df data

"""Similar functions for other algorithms, can be easily applied."""

from sklearn import svm

clf = svm.SVC(kernel='linear')

clf.fit(x_train, y1_train)

y_pred_svm = clf.predict(x_test)

r_sq = model.score(x_test, y1_test)
print('coefficient of determination:', r_sq)
print('intercept:', model.intercept_)
print('slope:', model.coef_)
for col, sl in zip(cols, model.coef_[0]):
    print(f'Feature [{col}] has importance [{sl}]')

# y_pred = model.predict(x)
for i,j in zip(y1_test, y_pred_svm):
    print(f'SVM Original {i}, Predicted [{j}]')

